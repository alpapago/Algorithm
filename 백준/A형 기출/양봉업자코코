양봉업자 코코

T = int(input())
dx_even = [-1, -1, 0, 1, 0, -1]
dy_even = [0, -1, -1, 0, 1, 1]
dx_odd = [-1, 0, 1, 1, 1, 0]
dy_odd = [0, -1, -1, 0, 1, 1]
 
 
def dfs(x, y, cnt, total, visited, arr, N, M):
    global answer
    if cnt == 4:
        answer = max(answer, total)
        return
 
    dx, dy = dx_even if y % 2 == 0 else dx_odd, dy_even if y % 2 == 0 else dy_odd
    for i in range(6):
        nx, ny = x + dx[i], y + dy[i]
        if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny]:
            visited[nx][ny] = 1
            dfs(nx, ny, cnt + 1, total + arr[nx][ny], visited, arr, N, M)
            visited[nx][ny] = 0
 
 
def check_Y_shapes(x, y, arr, N, M):
    global answer
    for i in range(6):
        for j in range(i + 1, 6):
            for k in range(j + 1, 6):
                total = arr[x][y]
                can_make_Y = True
                dx, dy = dx_even if y % 2 == 0 else dx_odd, dy_even if y % 2 == 0 else dy_odd
                for dx, dy in [(dx[i], dy[i]), (dx[j], dy[j]), (dx[k], dy[k])]:
                    nx, ny = x + dx, y + dy
                    if 0 <= nx < N and 0 <= ny < M:
                        total += arr[nx][ny]
                    else:
                        can_make_Y = False
                        break
                if can_make_Y:
                    answer = max(answer, total)
 
 
for tc in range(1, T + 1):
    N, M = map(int, input().split())
    arr = [list(map(int, input().split())) for _ in range(N)]
    visited = [[0 for _ in range(M)] for _ in range(N)]
    answer = 0
    for i in range(N):
        for j in range(M):
            visited[i][j] = 1
            dfs(i, j, 1, arr[i][j], visited, arr, N, M)
            check_Y_shapes(i, j, arr, N, M)
    print(f"#{tc} {answer}")
