from itertools import combinations
from collections import deque

def check(k):
    visited = [0] * (n)
    q = deque()
    v = k[0]
    q.append(v)
    visited[v] = 1

    while q:
        now = q.popleft()
        for e in adj[now]:
            if e in k and not visited[e]:
                visited[e] = 1
                q.append(e)

    for i in k:
        if not visited[i]:
            return False

    return True

T = int(input())

for tc in range(1,T+1):
    n = int(input())
    arr = [list(map(int,input().split())) for _ in range(n)]
    num = list(map(int,input().split()))
    adj = [[] for _ in range(n)]
    min_val = float('inf')

    for r in range(n):
        for c in range(n):
            if arr[r][c] == 1:
                adj[r].append(c)

    num_arr = [i for i in range(n)]

    for r in range(1,n//2+1):
        for com in combinations(num_arr, r):
            A = set(com)
            B = set(num_arr) - A

            if check(list(A)) and check(list(B)):
                min_val = min((abs(sum(num[v] for v in A)-sum(num[v] for v in B )),min_val))

    print(f"#{tc} {min_val} ")
