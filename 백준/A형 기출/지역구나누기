지역구 나누기

from itertools import combinations
from collections import deque

def bfs(start, group):
    visited = [False] * N
    q = deque([start])
    visited[start] = True

    while q:
        v = q.popleft()
        for i in range(N):
            if arr[v][i] and i in group and not visited[i]:
                visited[i] = True
                q.append(i)

    for node in group:
        if not visited[node]:
            return False
    return True

T = int(input())

for tc in range(1, T+1):
    N = int(input())
    arr = [list(map(int, input().split())) for _ in range(N)]
    population = list(map(int, input().split()))
    total_population = sum(population)
    min_diff = float('inf')
    
    for r in range(1, N//2+1):
        for comb in combinations(range(N), r):
            A = set(comb)
            B = set(range(N)) - A

            if bfs(list(A)[0], A) and bfs(list(B)[0], B):
                A_population = sum(population[v] for v in A)
                B_population = total_population - A_population
                difference = abs(A_population - B_population)
                
                min_diff = min(min_diff, difference)

    print(f"#{tc} {min_diff}")
