def dfs(idx, pre, worktime, visited, dp):
    if dp[idx] != 0:
        return dp[idx]
    if not pre[idx]:
        dp[idx] = worktime[idx]
        return dp[idx]
    
    visited[idx] = True
    times = []
    for next_task in pre[idx]:
        if visited[next_task]:
            return -1
        times.append(dfs(next_task, pre, worktime, visited, dp))
    visited[idx] = False

    dp[idx] = max(times) + worktime[idx]
    return dp[idx]

T = int(input())
for tc in range(1, T + 1):
    N = int(input())
    worktime = [0]
    pre = [[] for _ in range(N + 1)]
    for i in range(N):
        info = list(map(int, input().split()))
        worktime.append(info[0])
        for j in info[2:]:
            pre[i + 1].append(j)

    ans = float('inf')
    for i in range(1, N + 1):
        dp = [0] * (N + 1)
        original = worktime[i]
        worktime[i] //= 2
        max_time = 0
        for j in range(1, N + 1):
            visited = [False] * (N + 1)
            visited[j] = True
            temp = dfs(j, pre, worktime, visited, dp)
            if temp == -1:
                ans = -1
                break
            max_time = max(max_time, temp)
        if ans == -1:
            break
        worktime[i] = original
        ans = min(ans, max_time)
    print(f"#{tc} {ans}")

